import { promises as fs } from 'fs';
import * as path from 'path';

async function main() {
  await updateChronicle('./docs/lore/history.md');
}


async function updateChronicle(filePath: string) {
  // –ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
  const reportDir = path.resolve(path.dirname(filePath), './docs/lore/reports');

  // –ß—Ç–µ–Ω–∏–µ Markdown-—Ñ–∞–π–ª–∞
  const content = await fs.readFile(filePath, 'utf-8');

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫
  const regex = /^\s*- \[(\d{4}-\d{2}-\d{2})\]\(reports\/\1\.md\)/gm;
  const existingDates = new Set<string>();
  let match: RegExpExecArray | null;
  while ((match = regex.exec(content)) !== null) {
    existingDates.add(match[1]);
  }

  // –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
  const files = await fs.readdir(reportDir);
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD.md
  const dateFiles = files.filter(f => /^\d{4}-\d{2}-\d{2}\.md$/.test(f));

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
  const allDates = Array.from(new Set(dateFiles.map(f => f.slice(0, 10))));

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ existingDates)
  const newDates = allDates.filter(d => !existingDates.has(d));

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  const combined = Array.from(new Set([...existingDates, ...newDates])).sort((a, b) => b.localeCompare(a));

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º
  const grouped: Record<string, Record<string, string[]>> = {};
  combined.forEach(date => {
    const [year, month] = date.split('-');
    grouped[year] = grouped[year] || {};
    grouped[year][month] = grouped[year][month] || [];
    grouped[year][month].push(date);
  });

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
  let newSection = '';
  Object.keys(grouped)
    .sort((a, b) => b.localeCompare(a))
    .forEach(year => {
      newSection += `\n### ${year}\n\n`;
      Object.keys(grouped[year])
        .sort((a, b) => b.localeCompare(a))
        .forEach(month => {
          newSection += `#### ${month}\n\n`;
          grouped[year][month].forEach(date => {
            newSection += `- [${date}](reports/${date}.md)\n`;
          });
          newSection += '\n';
        });
    });

  // –ó–∞–º–µ–Ω–∞ —Å–µ–∫—Ü–∏–∏ "–•—Ä–æ–Ω–∏–∫–∞ –°–æ–±—ã—Ç–∏–π"
  const updated = content.replace(
    /### üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π[\s\S]*$/m,
    `### üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n*–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –æ—Ç—á–µ—Ç—ã –æ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.*${newSection}`
  );

  // –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
  await fs.writeFile(filePath, updated, 'utf-8');
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
